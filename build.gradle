plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
    id 'me.modmuss50.mod-publish-plugin' version '0.7.3'
    id 'io.freefair.lombok' version '6.3.0'
}

repositories {
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

group = 'com.github.wendall911.readyplayerfun'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = "${mod_name}"
def modid = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: "${mappings_channel}", version: mappings_version

    runs {
        client {
            workingDirectory project.file("run").canonicalPath
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                readyplayerfun {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file("run").canonicalPath
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                readyplayerfun {
                    source sourceSets.main
                }
            }
        }
    }    
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"

    config "${modid}.mixins.json"
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${version}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', '*.mixins.json']
def replaceProperties = [ 'version': version,
    'minecraft_version_range': minecraft_version_range,
    'forge_version_range': forge_version_range,
    "loader_version_range": loader_version_range
]

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar.finalizedBy('reobfJar', 'signJar')

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("./files/templates/") {
        include 'updates.json'
        expand 'version': version, 'minecraft_version': minecraft_version
    }

    it.into 'files/'
}

tasks.build.dependsOn('changelog', 'generateUpdates')

// Jar Signing
import net.minecraftforge.gradle.common.tasks.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    dependsOn 'reobfJar'

    // Skip the task if our secret data isn't available
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}

def changelogFile = project(":").projectDir.toString() + '/build/libs/' + project.getName() + '-' + version + '-changelog.txt'
def publishFile = project(":").projectDir.toString() + "build/libs/${archivesBaseName}-${version}.jar"

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(changelogFile);
    templateContent = file('files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

publishMods {
    file = file(publishFile)
    changelog = file(changelogFile).text
    type = "${release_type}".startsWith("release") ? STABLE : ("${release_type}".startsWith("beta") ? BETA : ALPHA)
    modLoaders.addAll(['forge'])

    if (project.hasProperty('rpfcurseApiKey')) {
        curseforge {
            accessToken = project.rpfcurseApiKey
            projectId = project.rpfcurseId
            javaVersions.add(JavaVersion.toVersion("${java_version}"))
            clientRequired = false
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('catalogue')
            optional('betterdays')
            optional('hourglass')
            optional('serene-seasons')
        }
    }
    if (project.hasProperty('rpfModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.rpfModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('betterdays')
            optional('hourglass')
            optional('serene-seasons')
        }
    }
    if (project.hasProperty('rpfGithubToken')) {
    }
}
