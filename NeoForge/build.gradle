plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
    id 'io.github.goooler.shadow'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
}

archivesBaseName = "${mod_id}"
version = neoforge_mod_version

neoForge {
    version = neoforge_version
    parchment {
        minecraftVersion = parchment_mc_version
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    implementation group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-neoforge', version: "${spectrelib_version}"
    jarJar group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-neoforge', version: "${spectrelib_version}"
}

shadowJar {
    archiveClassifier = ''
}

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(project(":").projectDir.toString() + '/build/libs/changelog.txt');
    templateContent = file(project(":").projectDir.toString() + '/files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'version': version, 'minecraft_version': minecraft_version
    }

    it.into '../files/'
}

tasks.generateUpdates.mustRunAfter('jar', 'sourcesJar')

tasks.build.dependsOn('changelog', 'generateUpdates')

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'
def publishFile = project(":").projectDir.toString() + "/Forge/build/libs/${archivesBaseName}-${version}.jar"

publishMods {
    file = file(publishFile)
    changelog = file(changelogFile).text
    type = "${release_type}".startsWith("release") ? STABLE : ("${release_type}".startsWith("beta") ? BETA : ALPHA)
    modLoaders.addAll(['neoforge', 'forge'])

    if (project.hasProperty('rpfcurseApiKey')) {
        curseforge {
            accessToken = project.rpfcurseApiKey
            projectId = project.rpfcurseId
            javaVersions.add(JavaVersion.toVersion("${java_version}"))
            clientRequired = true
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            embeds('spectrelib')
            optional('catalogue')
            optional('betterdays')
            optional('hourglass')
            optional('serene-seasons')
        }
    }
    if (project.hasProperty('rpfModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.rpfModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            optional('betterdays')
            optional('hourglass')
            optional('serene-seasons')
        }
    }
    if (project.hasProperty('rpfGithubToken')) {
    }
}
