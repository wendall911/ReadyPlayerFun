plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":Common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":Common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":Common", configuration: "transformProductionForge")) { transitive = false }
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'mod_version': mod_version
    }

    it.into '../files/'
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand 'version': project.version,
            'mc_version_range': project.mc_version_range,
            'forge_version_range': project.forge_version_range,
            "loader_version": project.loader_version,
            "architectury_version_range": project.architectury_version_range
    }

    configure {
        finalizedBy(updates)
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury-common.accessWidener"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

task renameJarForPublication(type: Zip, dependsOn: remapJar) {
    from remapJar.archiveFile.map { zipTree(it) }
    extension "jar"
    metadataCharset "UTF-8"
    destinationDirectory = base.libsDirectory
    classifier project.name + "-${rootProject.minecraft_short_version}-${rootProject.minecraft_version}"
}

assemble.dependsOn renameJarForPublication

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":Common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

jar.finalizedBy('signJar')

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Jar Signing
import net.minecraftforge.gradle.common.tasks.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    // Skip the task if our secret data isn't available
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-forge"
            from components.java
        }
    }

    repositories {
    }
}

curseforge {
    if (project.hasProperty('rpfcurseApiKey')) {
        apiKey = project.rpfcurseApiKey
        project {
            id = project.rpfcurseId
            changelog = file(project(":").projectDir.toString() + '/build/libs/' + rootProject.name + '-' + version + '-changelog.txt')
            releaseType = cf_release_type
            addGameVersion('Forge')
            "${cf_versions}".split(',').each {
                addGameVersion "${it}"
            }
            mainArtifact(renameJarForPublication) {
                relations {
                    requiredDependency 'architectury-api'
                    optionalDependency 'configured'
                    optionalDependency 'catalogue'
                    optionalDependency 'hourglass'
                    optionalDependency 'serene-seasons'
                }
            }
        }
    }
}

tasks.curseforge.dependsOn build
