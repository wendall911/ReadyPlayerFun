plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":Common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://maven.terraformersmc.com/releases"
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":Common", configuration: "namedElements")) {
        transitive = false
    }
    shadowCommon(project(path: ":Common", configuration: "transformProductionFabric")) {
        transitive = false
    }
    modImplementation("com.terraformersmc:modmenu:4.0.4") {
        transitive = false
    }
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("../files/templates/") {
        include 'updates.json'
        expand 'mod_version': mod_version
    }

    it.into '../files/'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
            'architectury_version': project.architectury_version,
            'minecraft_short_version': project.minecraft_short_version
    }

    configure {
        finalizedBy(updates)
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

task renameJarForPublication(type: Zip, dependsOn: remapJar) {
    from remapJar.archiveFile.map { zipTree(it) }
    extension "jar"
    metadataCharset "UTF-8"
    destinationDirectory = base.libsDirectory
    classifier project.name + "-${rootProject.minecraft_short_version}-${rootProject.minecraft_version}"
}

assemble.dependsOn renameJarForPublication

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":Common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

curseforge {
    if (project.hasProperty('rpfcurseApiKey')) {
        apiKey = project.rpfcurseApiKey
        project {
            id = project.rpfcurseId
            changelog = file(project(":").projectDir.toString() + '/build/libs/' + rootProject.name + '-' + version + '-changelog.txt')
            releaseType = cf_release_type
            addGameVersion('Fabric')
            "${cf_versions}".split(',').each {
                addGameVersion "${it}"
            }
            mainArtifact(renameJarForPublication) {
                relations {
                    requiredDependency 'architectury-api'
                }
            }
        }
    }
}

tasks.curseforge.dependsOn build
