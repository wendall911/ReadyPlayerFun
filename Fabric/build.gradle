plugins {
    id 'fabric-loom'
    id 'idea'
    id 'me.modmuss50.mod-publish-plugin'
    id 'io.freefair.lombok'
}

version = "${minecraft_version}-${mod_version}-FABRIC"
archivesBaseName = "${mod_id}"

repositories {
    maven {
        url "https://maven.terraformersmc.com/releases"
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings(loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${fabric_parchment_mc_version}:${fabric_parchment_version}@zip")
    })

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-fabric', version: "${spectrelib_range}"

    modImplementation("com.terraformersmc:modmenu:${mod_menu_version}") {
        transitive = false
    }

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":Common")

    include group: 'com.illusivesoulworks.spectrelib', name: 'spectrelib-fabric', version: "${spectrelib_version}"

}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version
    exclude '.cache'
    duplicatesStrategy(DuplicatesStrategy.FAIL)

    filesMatching("fabric.mod.json") {
        expand 'version': project.version, 'fabric_mc_version_range': project.fabric_mc_version_range, 'license': project.license,
                'mod_id': project.mod_id, 'mod_author': project.mod_author, 'mod_description': project.mod_description,
                'mod_name': project.mod_name, 'issue_tracker': project.issue_tracker, 'fabric_loader_min_version': fabric_loader_min_version
    }

    filesMatching("pack.mcmeta") {
        expand 'mod_name': project.mod_name
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

def changelogFile = project(":").projectDir.toString() + '/build/libs/changelog.txt'
def publishFile = project(":").projectDir.toString() + "/Fabric/build/libs/${archivesBaseName}-${version}.jar"

publishMods {
    file = file(publishFile)
    changelog = file(changelogFile).text
    type = "${release_type}".startsWith("release") ? STABLE : ("${release_type}".startsWith("beta") ? BETA : ALPHA)
    modLoaders.add('fabric')

    if (project.hasProperty('rpfcurseApiKey')) {
        curseforge {
            accessToken = project.rpfcurseApiKey
            projectId = project.rpfcurseId
            javaVersions.add(JavaVersion.toVersion("${java_version}"))
            clientRequired = false
            serverRequired = true
            minecraftVersions.addAll("${release_versions}".split(','))
            embeds('spectrelib')
            requires('fabric-api')
            optional('betterdays')
        }
    }
    if (project.hasProperty('rpfModrinthId')) {
        modrinth {
            accessToken = project.modrinthKey
            projectId = project.rpfModrinthId
            minecraftVersions.addAll("${release_versions}".split(','))
            requires('fabric-api')
            optional('betterdays')
        }
    }
    if (project.hasProperty('rpfGithubToken')) {
    }
}
